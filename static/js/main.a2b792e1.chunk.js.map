{"version":3,"sources":["quali/DriverListRow.js","quali/DriverList.js","bar-graph/BarGraphTooltip.js","bar-graph/BarGraphBar.js","quali/QualiPredictionsGraph.js","quali/QualiPredictions.js","AboutPage.js","App.js","serviceWorker.js","index.js"],"names":["DriverList","props","className","this","selected","onClick","id","width","height","style","fill","color","driver","constructor","React","Component","rowClicked","did","setState","state","isMobile","expanded","window","matchMedia","matches","order","map","key","drivers","toString","name","BarGraphTooltip","console","log","value","backgroundColor","label","BarGraphBar","QualiPredictionsGraph","positions","Array","keys","i","predictions","scaledValue","year","valueAsPercentage","QualiPredictions","handleDriverSelection","selectedDriverId","onToggleQualiOptionsSelected","changeQualiExpanded","onNewQualiSelected","selection","fetch","process","then","res","json","gpTitle","racesList","indexFileName","mostRecentId","undefined","collator","Intl","Collator","numeric","sensitivity","years","Object","sort","compare","races","push","length","reverse","predictionsForDriver","driverColor","options","onChange","AboutPage","class","href","App","to","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2b792e1.chunk.js","sourcesContent":["import React from 'react';\nimport \"./driver-list-row.css\";\n\n/**\n * An individual row element in a driver list\n */\nexport default class DriverList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let className = \"driver-list-row\";\n        if (this.props.selected) {\n            className += \" \" + \"selected\";\n        }\n        return (\n            <tr className={className} onClick={() => this.props.onClick(this.props.id)} >\n                <td className=\"driver-list-cell\">\n                    <svg width=\"8\" height=\"16\" style={{fill: this.props.color}} >\n                        <rect width=\"7\" height=\"20\"></rect>\n                    </svg>\n                    <span>{this.props.driver}</span>\n                </td>\n                <td className=\"driver-list-cell\">{this.props.constructor}</td>\n            </tr>\n        );\n    }\n}","import React from 'react';\n\nimport \"./driver-list.css\";\nimport DriverListRow from './DriverListRow';\n\n/**\n * The driver list component used in showing participating drivers\n */\nexport default class DriverList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {selected: -1, isMobile: false};\n    }\n\n    componentDidMount() {\n        var mq = window.matchMedia( \"(max-width: 768px)\" );\n        if (mq.matches) {\n            this.setState({isMobile: true, expanded: true});\n        }\n    }\n\n    rowClicked = (did) => {\n        this.setState({selected: did});\n        this.props.rowClicked(did);\n        if (this.state.isMobile) {\n            this.setState({expanded: !this.state.expanded});\n        }\n    };\n\n    render() {\n        return (\n            <div style={{\"display\": \"flex\", \"width\": \"100%\", \"min-width\": \"300px\"}}>\n                <table className=\"driver-list-table\">\n                    <thead>\n                        <tr>\n                            <th>Driver</th>\n                            <th>Constructor</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.order.map(id => {\n                            if (this.state.isMobile && !this.state.expanded && (this.state.selected !== id)) {\n                                return null;\n                            }\n                            return <DriverListRow\n                                key={id}\n                                id={id}\n                                selected={this.state.selected === id ? true : false}\n                                driver={this.props.drivers[id.toString()].name}\n                                constructor={this.props.drivers[id.toString()].constructor}\n                                color={this.props.drivers[id.toString()].color} \n                                onClick={this.rowClicked} />;\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './BarGraphTooltip.css';\n\n/**\n * A reusable tooltip for a bar chart\n */\nexport class BarGraphTooltip extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        console.log(this.props.value);\n        return (\n            <div className=\"barGraphTooltip\" style={{backgroundColor: this.props.color}}>{this.props.label}</div>\n        );\n    }\n}","import React from 'react';\nimport { BarGraphTooltip } from './BarGraphTooltip';\nimport './BarGraphBar.css';\n\n/**\n * A single row in a bar chart.\n */\nexport class BarGraphBar extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        console.log(this.props.value);\n        return (\n            <div className=\"barGraphRowContainer\">\n                <div className=\"barGraphLabel\">{this.props.label}</div>\n                <div className=\"barGraphBar\" style={{width: this.props.value, backgroundColor: this.props.color}} />\n                {this.props.value !== '0%' ?\n                    <BarGraphTooltip color={this.props.color} label={this.props.value} /> :\n                    null\n                }\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { BarGraphBar } from '../bar-graph/BarGraphBar';\n\n/**\n * The bar graph used in showing predicted results for each driver\n */\nexport class QualiPredictionsGraph extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const positions = [...Array(20).keys()];\n        return (\n            <div className=\"barChart\">\n                {positions.map(i => {\n                    const value = this.props.predictions ? this.props.predictions[i.toString()] : null;\n                    const scaledValue = this.props.year >= 2020 ? (value / 100.0) : (value / 10.0);\n                    const valueAsPercentage = scaledValue ? `${scaledValue}%` : \"0%\";\n                    return <BarGraphBar  \n                        value={valueAsPercentage}\n                        label={i + 1}\n                        color={this.props.color ? this.props.color : \"#00000000\"}\n                    />;\n                })}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Select from 'react-select';\n\nimport DriverList from './DriverList';\nimport { QualiPredictionsGraph } from './QualiPredictionsGraph';\nimport './QualiPredictions.css';\n\n/**\n * The parent component for F1 predictions. It contains state for which predictions to use.\n */\nexport default class QualiPredictions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            drivers: {},\n            order: [],\n            predictions: {},\n            selectedDriverId: null,\n            gpTitle: \"\",\n            racesList: {},\n            changeQualiExpanded: false,\n            year: null\n        };\n\n        //Fetch index file, sort the years and races in it\n        //TODO How does this relate to React lifecycle...\n        const indexFileName = `${process.env.PUBLIC_URL}/data/index.json`;\n        let mostRecentId = undefined;\n        const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n        fetch(indexFileName)\n            .then(res => {\n                return res.json();\n            })\n            .then(res => {\n                const years = Object.keys(res).sort(collator.compare);\n                //For each year:\n                console.log(\"Above loop\" + years);\n                const racesList = [];\n                for (let i = 0; i < years.length; i++) {\n                    const races = Object.keys(res[years[i]]).sort(collator.compare);\n                    races.map(id => (\n                        racesList.push({ value: id, label: `${years[i]} ${res[years[i]][id]}` })\n                    ));\n                    console.log(races);\n\n                    //Select most recent race.\n                    console.log(\"In loop\");\n                    mostRecentId = races[races.length - 1];\n                    \n                }\n                racesList.reverse();\n                this.setState({ racesList });\n                fetch(`${process.env.PUBLIC_URL}/data/${mostRecentId}.json`)\n                    .then(res => {\n                        return res.json();\n                    })\n                    .then(res => {\n                        this.setState({\n                            drivers: res[\"drivers\"],\n                            order: res[\"order\"],\n                            predictions: res[\"predictions\"],\n                            gpTitle: `${res[\"year\"]} ${res[\"name\"]}`,\n                            year: res[\"year\"],\n                        });\n                    });\n            });\n    }\n\n    handleDriverSelection = (did) => {\n        console.log(did);\n        this.setState({ selectedDriverId: did });\n    };\n\n    onToggleQualiOptionsSelected = () => {\n        this.setState({changeQualiExpanded: !this.state.changeQualiExpanded});\n    }\n\n    onNewQualiSelected = selection => {\n        console.log(selection);\n        fetch(`${process.env.PUBLIC_URL}/data/${selection.value}.json`)\n            .then(res => {\n                return res.json();\n            })\n            .then(res => {\n                this.setState({\n                    drivers: res[\"drivers\"],\n                    order: res[\"order\"],\n                    predictions: res[\"predictions\"],\n                    gpTitle: `${res[\"year\"]} ${res[\"name\"]}`,\n                    year: res[\"year\"],\n                });\n            });\n    }\n\n    render() {\n        const predictionsForDriver = this.state.selectedDriverId ? this.state.predictions[this.state.selectedDriverId] : {};\n        const driverColor = this.state.selectedDriverId ? this.state.drivers[this.state.selectedDriverId].color : null; \n        return (\n            <div>\n                <div className=\"qualiHeader\">\n                    <span className=\"qualiHeaderText\">{this.state.gpTitle} - Qualifying predictions</span>\n                    <button onClick={this.onToggleQualiOptionsSelected} className='toggleQualiOptionsButton'>\n                        { this.state.changeQualiExpanded ?  'Cancel' : 'Change GP' }\n                    </button>\n                    {this.state.changeQualiExpanded ?<div>\n                        <Select\n                            className='qualiOptionsSelect'\n                            value={this.state.gpTitle}\n                            options={this.state.racesList}\n                            onChange={this.onNewQualiSelected}\n                        />\n                    </div> : null}\n                </div>\n                <div className=\"mainContainer\">\n                    <DriverList \n                        rowClicked={this.handleDriverSelection}\n                        drivers={this.state.drivers}\n                        order={this.state.order} \n                    />\n                    <div style={{\"min-width\": \"300px\", \"width\": \"100%\"}}>\n                        {this.state.selectedDriverId ?\n                            <div className=\"selectedDriverText\" \n                                style={{color: this.state.drivers[this.state.selectedDriverId].color}}>\n                                {this.state.drivers[this.state.selectedDriverId].name}\n                            </div> : \n                            <div className=\"selectedDriverText\" style={{color: '#888888'}}>Choose your driver:</div>\n                        }\n                        <QualiPredictionsGraph\n                            predictions={predictionsForDriver}\n                            color={driverColor} \n                            selectedDriverId={this.state.selectedDriverId} \n                            year={this.state.year} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport \"./about-page.css\"\n\nexport default function AboutPage() {\n    return (\n        <div class=\"about-page-root\">\n            <p>\n                F1Predict is an application that aims to predict the results of Formula 1 Grand Prix using statistical models.\n                At the moment, the application hosts a model for predicting qualifying results (first released in 2018),\n                and a model for predicting race results is currently under development.\n            </p>\n            <p>\n                F1Predict uses a variety of data and techniques in predicting the results. The model for predicting qualifying\n                results uses historical data of qualifyings (since 2003) to calculate \"power scores\" for each driver, constructor\n                and engine. These scores are then used to calculate an overall score for each competitor, along with an adjustment\n                for how well the driver, constructor and engine has performed in the particular track in the past. Machine learning\n                (linear regression) is used to determine how much the score of the driver, constructor, engine and their track-specific\n                adjustments should be weighted. A Monte Carlo simulation is then used to determine the odds of each competitor in\n                finishing in a particular position. After a qualifying has been completed, the model's power scores will be adjusted\n                up or down depending on whether the driver, constructor or engine qualified better or worse than what the model expected.\n                Here, the metric for how well or poorly a driver did is how well their best qualifying time (across all sessions)\n                compared to the mean and standard deviation of the times of other drivers.\n            </p>\n            <p>\n                The race model is currently in development, and it will be based around Elo scores. We're hoping to release the race\n                model before the end of the 2020 season.\n            </p>\n            <p>Credits:</p>\n            <ul>\n                <li>Qualifying model by Ville Kuosmanen</li>\n                <li>Race model by Ville Kuosmanen, Raiyan Chowdhury and Philip Searcy</li>\n                <li>Special thanks to <a href=\"https://ergast.com/mrd/\">Ergast F1 API</a></li>\n            </ul>\n            <p>\n                If you are interested in exploring the codebase of the project, you can fork the project on GitHub! The project is\n                licensed under an <a href=\"https://github.com/villekuosmanen/F1Predict/blob/master/LICENSE\">open source license</a>.\n                The repository for the predictions application is <a href=\"https://github.com/villekuosmanen/F1Predict/\">F1Predict</a>,\n                while the repository for this web app is <a href=\"https://github.com/villekuosmanen/F1PredictWeb/\">F1PredictWeb</a>.\n            </p>\n        </div>\n    )\n}","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nimport QualiPredictions from './quali/QualiPredictions'\nimport AboutPage from './AboutPage'\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"pageHeader\">\n                <Link to=\"/\" id=\"title\">F1Predict</Link>\n                <Link to=\"/\">Quali</Link>\n                <Link to=\"/race\">Race</Link>\n                <Link to=\"/about\">About</Link>\n            </div>\n            <div id=\"background\">\n                <Switch >\n                    <Route path=\"/race\">\n                        <div class=\"about-page-root\">\n                            <p>\n                                Currently under development\n                            </p>\n                        </div>\n                    </Route>\n                    <Route path=\"/about\">\n                        <AboutPage />\n                    </Route>\n                    <Route path=\"/\">\n                        <QualiPredictions />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}